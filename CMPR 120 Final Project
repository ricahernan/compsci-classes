#include <iostream>
#include<iomanip>
#include<string>
#include<ctime>
#include<fstream>

using namespace std;

const double MAX_ALLOWED = 20;

void menu();

int main()
{

	menu();

	system("pause");
	return 0;
}

void menu()
{
	double balance = 0;
	double amount = 0;
	int correctGuesses = 0;
	int missedGuesses = 0;

	string playerName, inputYN, userInput;

	bool quit = false, YN = false, validInput = false;

	char choice;

	cout << setprecision(2) << fixed << showpoint;
	cout << "Please enter username (NO SPACES): ";
	cin >> playerName;
	
	do
	{
		cout << "\n***The Winners ***\n" << endl;
		cout << "***MAIN MENU***\n" << endl;
		
		cout << "\nPlease select one of the following:\n" << endl;
		cout << "\t1: Display my available credit" << endl;
		cout << "\t2: Add credits to my account" << endl;
		cout << "\t3: Play The Guessing Game" << endl;
		cout << "\t4: Display My Statistics" << endl;
		cout << "\t5: Save My Statistics" << endl;
		cout << "\t6: To exit" << endl;
		cin >> choice;
		cout << endl;
		switch (choice)
		{

		case '1': cout << "You entered 1: Display my available credit\n";
		{
			cout << "Your available balance is: $ " << balance << "\n\n";
		}
		break;


		case '2': cout << "You entered 2: Add credits to my account\n";
		{
			do
			{
				cout << "Input amount of credits up to $20: ";
				cin >> amount;

				if (!cin.fail())
				{
					if (amount >= 0 && amount <= 20)
					{
						validInput = true;
					}
					else
					{
						cout << "Value must be 0 or less than or equal to 20.\n";
					}
				}
				else
				{
					cout << "Value must be a number.\n";
					cin.clear();
					cin.ignore(INT_MAX, '\n');
				}
			} while (!validInput);
			{
				balance += amount;
			}
		}
		break;

		case '3': cout << "You entered 3: Play The Guessing Game\n";
		{
			bool numberCheck1to10 = false;

			do
			{
				cout << "This game costs $5 dollars to play. Do you wish to proceed? (Y/N): ";
				cin >> userInput;

				//Convert to lower
				for (unsigned i = 0; i < userInput.length(); i++) userInput[i] = tolower(userInput[i]);
				{

					if (userInput == "y") YN = true;
					if (userInput == "n") YN = false;
				}
			} while (userInput != "y" && userInput != "n");
			{}




			if (YN == true)
			{
				if (balance >= 5)
				{
					balance -= 5;
					cout << "\nYou payed $5.\n";

					int randomNum, userGuess;
					srand((unsigned)(time(NULL)));

					do
					{
						randomNum = rand() % 10 + 1;
						//cout << randomNum << endl;
						cout << "\nGuess a number between 1 and 10. ";
						cin >> userGuess;

						if (!cin.fail())
						{
							if (userGuess >= 1 && userGuess <= 10)
							{
								numberCheck1to10 = true;
							}
							else
							{
								cout << "\nValue must be 1 or less than or equal to 10.\n";
							}
						}
						else
						{
							cout << "Value must be a number.\n";
							cin.clear();
							cin.ignore(INT_MAX, '\n');
						}
					} while (!numberCheck1to10);
					{}


					if (userGuess == randomNum)
					{
						cout << "\nYou are correct! You win $50 dollars!\n";
						balance += 50;
						correctGuesses++;
					}
					else
					{
						cout << "\nYou are incorrect. You lose :( \n";
						missedGuesses++;
					}
				}
				else
				{
					cout << "\nNot enough funds required to play game! Add Funds!\n\n";
				}

			}


		}
		break;
		case '4': cout << "You entered 4: Display My Statistics\n";
		{
			ifstream userData;


			do
			{
				cout << "\nDo you wish to view your stats? (Y/N): ";
				cin >> userInput;

				//Convert to lower
				for (unsigned i = 0; i < userInput.length(); i++) userInput[i] = tolower(userInput[i]);
				{

					if (userInput == "y") YN = true;
					if (userInput == "n") YN = false;
				}
			} while (userInput != "y" && userInput != "n");
			{}

			/*if (YN == true)
			{
				cout << "Enter a previously saved file name: ";
				cin >> playerName;
				userData.open(playerName);

			}
			if (userData.is_open())
			{
				while (getline(userData, playerName))
				{
					cout << playerName << endl;
				}

				userData.close();
			}
			else
			{
				cout << "File not found.\n";
			}*/





			cout << "\nCurrent Session Stats\n";
			time_t sysTime = time(0);
			char* time = ctime(&sysTime);
			cout << "\nData Time: " << time;
			cout << "Player Name: " << playerName << endl;
			cout << "Available Credit: " << balance << endl;
			cout << "Games Played: " << correctGuesses + missedGuesses << endl;
			cout << "Correct Guesses: " << correctGuesses << endl;
			cout << "Missed Guesses: " << missedGuesses << endl;
			cout << "Money you won: $" << correctGuesses * 20 << endl;
			cout << "Money you lost: $" << missedGuesses * 5 << endl;
		}
		break;
		case '5':cout << "You entered 5: Save My Statistics\n";
		{
			ofstream userData(playerName);
			do
			{
				cout << "Do you wish to save your stats? (Y/N): ";
				cin >> userInput;

				//Convert to lower
				for (unsigned i = 0; i < userInput.length(); i++) userInput[i] = tolower(userInput[i]);
				{

					if (userInput == "y") YN = true;
					if (userInput == "n") YN = false;
				}
			} while (userInput != "y" && userInput != "n");
			{}

			if (YN == true)
			{
				cout << "Please enter username for save file (NO SPACES): ";
				cin >> playerName;
				userData.open(playerName, ios::app);

				time_t sysTime = time(0);
				char* time = ctime(&sysTime);
				userData
					<< "\nData Time: " << time
					<< "Player Name: " << playerName << endl
					<< "Available Credit: " << balance << endl
					<< "Games Played: " << correctGuesses + missedGuesses << endl
					<< "Correct Guesses: " << correctGuesses << endl
					<< "Missed Guesses: " << missedGuesses << endl
					<< "Money you won: $" << correctGuesses * 50 << endl
					<< "Money you lost: $" << missedGuesses * 5 << endl;

				cout << "Data saved in file: " << playerName << endl;
				userData.close();

			}


		}
		break;
		case '6': cout << "Thank you for using The Winners software. Good bye!\n";
		{
			quit = true;
		}
		break;

		default: cout << "You did not enter 1,2,3,4,5, or 6\n\n";
		}




	} while (!quit);
	{}

}

/*solution properties, configuration
properties, C/C++, preprocessor, preprocessor definitions, edit,
paste _CRT_SECURE_NO_WARNINGS which enabled the use of ctime*/
